d <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
factors(d)
# Author: Bryan Carlson
# Contact: bryan.carlson@ars.usda.gov
# Purpose: Calculate relative yields using "average" normalization method bounded by strips
# ---- Setup ----
library(rgdal)
library(geojsonio)
library(jsonlite)
library(spatialEco)
d <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp")
refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp")
source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/Script.R", echo = TRUE, encoding = "Windows-1252")
WGS84 <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp")
# Convert csv gain mass data to spatial points and specify the datum
ysp <- SpatialPoints(y[, 6:5], proj4string = WGS84)
plot(ref)
plot(refPoints)
df <- refPoints@data
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
df$Crop
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
t <- df[df$Strip == 6 & df$Field == "A",]
t
df["Crop"]
df <- df$Crop
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
df <- df$Crop <- NA
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
df <- refPoints@data
# Set crops
df <- df$Crop <- NA
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
df <- refPoints@data
df[df$Strip == 6 & df$Field == "A",]
df[df$Strip == 6 & df$Field == "A",]$Crop
df[df$Strip == 6 & df$Field == "A",]$Crop = "SW"
t <- df[df$Strip == 6 & df$Field == "A",]
t$Crop
t
df$Crop <- NA
df
t <- df[df$Strip == 6 & df$Field == "A",]$Crop
t
t <- df[df$Strip == 6 & df$Field == "A",]
t
t$Crop = "SW"
t
df <- refPoints@data
# Set crops
df$Crop <- NA
df[df$Strip==6 & df$Field=="A",]$Crop = "SW"
df
df <- refPoints@data
# Set crops
df$Crop <- NA
df[df$Strip == 6 & df$Field == "A",]$Crop = "SW"
df[df$Strip == 5 & df$Field == "A",]$Crop = "SW"
df[df$Strip == 4 & df$Field == "A",]$Crop = "SL"
df[df$Strip == 3 & df$Field == "A",]$Crop = "SL"
df[df$Strip == 2 & df$Field == "A",]$Crop = "SL"
df[df$Strip == 1 & df$Field == "A",]$Crop = "SL"
df[df$Strip == 6 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 5 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 4 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 3 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 2 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 1 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 1 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 2 & df$Field == "C",]$Crop = "SL"
df[df$Strip == 3 & df$Field == "C",]$Crop = "SB"
df[df$Strip == 4 & df$Field == "C",]$Crop = "WW"
df[df$Strip == 5 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 6 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 7 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 8 & df$Field == "C",]$Crop = "SW"
DF
df
write.csv("Output/HY2014_Crops.csv")
write.csv("Output/HY2014_Crops.csv")
write.csv(df, "Output/HY2014_Crops.csv")
refPoints@data = df
write.csv(refPoints, "Output/HY2014_Crops.csv")
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp") # Convert csv gain mass data to spatial points and specify the datum df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "SL" df[df$Strip == 3 & df$Field == "A",]$Crop = "SL" df[df$Strip == 2 & df$Field == "A",]$Crop = "SL" df[df$Strip == 1 & df$Field == "A",]$Crop = "SL" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "SL" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints, "Output/HY2014_AssumedCropPerGeoRefPoint_171127.csv")
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
t <- merge(y, georef, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"))
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp")
t <- merge(y, georef@data, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"))
t <- merge(y, georef@data, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
t <- merge(y, georef@data, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
plot(t)
t <- merge(y, georef, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
plot(t)
plot(t)
plot(t[!is.na(t),])
summary(t)
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171117.json", what = "sp")
t <- merge(y, georef, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
plot(t[!is.na(t) & !is.infinite(t),])
plot(t[!is.na(t@data) & !is.infinite(t@data),])
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json", what = "sp") # Get dataframe df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "SL" df[df$Strip == 3 & df$Field == "A",]$Crop = "SL" df[df$Strip == 2 & df$Field == "A",]$Crop = "SL" df[df$Strip == 1 & df$Field == "A",]$Crop = "SL" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "SL" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints, "Output/HY2014_AssumedCropPerGeoRefPoint_171127.csv")
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json", what = "sp") # Get dataframe df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "SL" df[df$Strip == 3 & df$Field == "A",]$Crop = "SL" df[df$Strip == 2 & df$Field == "A",]$Crop = "SL" df[df$Strip == 1 & df$Field == "A",]$Crop = "SL" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "SL" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints, "Output/HY2014_AssumedCropPerGeoRefPoint_171127.csv")
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") date.today <- format(Sys.Date(), "%y%m%d") refPoints <- geojson_read(     paste("Input/CookEast_GeoreferencePoints_",         date.today,         ".json", sep = ""),     what = "sp") # Get dataframe df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "SL" df[df$Strip == 3 & df$Field == "A",]$Crop = "SL" df[df$Strip == 2 & df$Field == "A",]$Crop = "SL" df[df$Strip == 1 & df$Field == "A",]$Crop = "SL" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "SL" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints,           paste(             "Output/HY2014_AssumedCropPerGeoRefPoint_",             date.today,             ".csv",             sep = "") )
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json", what = "sp")
t <- merge(y, georef, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
t <- merge(y, georef, by.x=c("Col", "Row2"), by.y=c("Column", "Row2"), all.x = TRUE)
plot(t)
plot(georef)
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json", what = "sp")
t <- merge(y, georef, by.x = c("Col", "Row2"), by.y = c("Column", "Row2"), all.x = TRUE)
plot(georef)
plot(t)
t[t$id.y == 60,]
t[t$id.y == "60",]
foo <- t[t$id2]
t[t$id2 == 60,]
t[t$ID2.y == 60,]
max(t$ID)
max(t$ID2.y)
max(t$ID2.y, n)
max(t$ID2.y, na.rm = T)
all.x = TRUE)
df <- merge(hy2014, georef,            by.x = c("Col", "Row2"),            by.y = c("Column", "Row2"),            all.x = TRUE)
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
hy2014 <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",                        what = "sp")
df <- merge(hy2014, georef,            by.x = c("Col", "Row2"),            by.y = c("Column", "Row2"),            all.x = TRUE)
for (id in 1:max(df$ID2.y, na.rm = TRUE)) {     print(paste(df[df$ID2.y == id,])) }
for (id in 1:max(df$ID2.y, na.rm = TRUE)) {     print(paste(df[df$ID2.y == id,]$ID2.y)) }
for (id in 1:max(df$ID2.y, na.rm = TRUE)) {     print(paste("id:",id, "::", df[df$ID2.y == id,]$ID2.y)) }
id.t <- 1
library(rgdal) library(geojsonio) #library(jsonlite) #library(spatialEco) hy2014 <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",                        what = "sp") df <- merge(hy2014, georef,            by.x = c("Col", "Row2"),            by.y = c("Column", "Row2"),            all.x = TRUE)
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
setwd("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014")
hy2014 <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
hy2014$ShoudKeep <- NULL
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",                        what = "sp")
# Merge the data based on col and row2 because John Morse said he focused on
# row and columns, not ID2 values (this is important because ID2 values are not
# consistent with row/column values)
df <- merge(hy2014, georef,            by.x = c("Col", "Row2"),            by.y = c("Column", "Row2"),            all.x = TRUE)
# Remove missing data
dfc <- df[!is.na(df$ID2.y),]
# Add isGood column
#dfc$isGood <- 0
# Create dataframe with "good" values
dfg <- subset(dfc, FALSE)
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
n
c
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
# ---- Setup ----
library(rgdal)
library(geojsonio)
setwd("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014")
hy2014 <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
hy2014$ShoudKeep <- NULL
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",
what = "sp")
library(rgdal)
library(geojsonio)
#library(jsonlite)
#library(spatialEco)
setwd("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014")
hy2014 <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
hy2014$ShoudKeep <- NULL
georef <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",                        what = "sp")
# Merge the data based on col and row2 because John Morse said he focused on
# row and columns, not ID2 values (this is important because ID2 values are not
# consistent with row/column values)
df <- merge(hy2014, georef,            by.x = c("Col", "Row2"),            by.y = c("Column", "Row2"),            all.x = TRUE)
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
n
rep.withProtein$     f
rep.withProtein$TotalGrain.g.
duplicated(rep.withProtein$TotalGrain.g.)
unique(rep.withProtein$TotalGrain.g.)
length(unique(rep.withProtein$TotalGrain.g.))
Q
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
n
c
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
n
c
n
c
rtvs::debug_source("C:/Dev/Projects/CookEastPlantHandHarvest/R/cleaningHY2014/GPHY2017selectBestData.R")
library(plyr)
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2")
dfg.slim <- dfg[, col.keep]
col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | ")
dfg.slim$NOTES <- NULL
dfg.slim$Notes2 <- NULL
dfg.slim$Notes3 <- NULL
names(dfg.slim) <- c("Column", "Row2", "SampleID", "Crop", "GrainWeightWet",       "Protein", "Moisture", "Starch", "WGlutDM", "TestWeight",       "Longitude", "Latitude", "Notes")
filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "")
write.csv(dfg.slim, filePath.slim)
date.today <- format(Sys.Date(), "%y%m%d")
filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "")
write.csv(dfg.slim, filePath.slim)
dfg.slim <- dfg[, col.keep]
col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | ")
dfg.slim$NOTES <- NULL
dfg.slim$Notes2 <- NULL
dfg.slim$Notes3 <- NULL
names(dfg.slim) <- c("Column", "Row2", "SampleID", "Crop", "GrainWeightWet",       "Protein", "Moisture", "Starch", "WGlutDM", "TestWeight", "ID2",       "Longitude", "Latitude", "Notes")
filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "")
write.csv(dfg.slim, filePath.slim)
write.csv(dfg.slim, filePath.slim)
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | ") dfg.slim$NOTES <- NULL dfg.slim$Notes2 <- NULL dfg.slim$Notes3 <- NULL names(dfg.slim) <- c("Column", "Row2", "SampleID", "Crop", "GrainWeightWet",       "Protein", "Moisture", "Starch", "WGlutDM", "TestWeight", "ID2",       "Longitude", "Latitude", "Notes") filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "") write.csv(dfg.slim, filePath.slim)
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | ") dfg.slim$NOTES <- NULL dfg.slim$Notes2 <- NULL dfg.slim$Notes3 <- NULL
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] within(dfg.slim, NotesKeep <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | "))
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] dfg.slim$NotesKeep <- within(dfg.slim, x <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3,                         sep = " | "))
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] dfg.slim <- within(dfg.slim, NotesKeep <- paste(NOTES, Notes2, Notes3,                         sep = " | "))
# Clean data col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] dfg.slim <- within(dfg.slim, NotesKeep <- paste(NOTES, Notes2, Notes3,                         sep = " | ")) #col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3, #                        sep = " | ") dfg.slim$NOTES <- NULL dfg.slim$Notes2 <- NULL dfg.slim$Notes3 <- NULL names(dfg.slim) <- c("Column", "Row2", "SampleID", "Crop", "GrainWeightWet",       "Protein", "Moisture", "Starch", "WGlutDM", "TestWeight", "ID2",       "Longitude", "Latitude", "Notes") filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "") write.csv(dfg.slim, filePath.slim, row.names=FALSE)
col.keep <- c("Col", "Row2", "BarcodeFinal", "Crop", "TotalGrain.g.",               "protein", "moisture", "starch", "gluten", "testWeight",               "NOTES", "Notes2", "Notes3", "ID2.y", "coords.x1", "coords.x2") dfg.slim <- dfg[, col.keep] dfg.slim <- within(dfg.slim, NotesKeep <- paste(NOTES, Notes2, Notes3,                         sep = " | ")) #col.keep$Notes <- paste(dfg.slim$NOTES, dfg.slim$Notes2, dfg.slim$Notes3, #                        sep = " | ") dfg.slim$NOTES <- NULL dfg.slim$Notes2 <- NULL dfg.slim$Notes3 <- NULL names(dfg.slim) <- c("Column", "Row2", "SampleID", "Crop", "GrainWeightWet",       "Protein", "Moisture", "Starch", "WGlutDM", "TestWeight", "ID2",       "Longitude", "Latitude", "Notes") dfg.slim$FieldID <- "CookEast" dfg.slim$Year <- 2014 filePath.slim <- paste(                        "Output/selectedDataSlimColumns_",                        date.today,                        ".csv",                        sep = "") write.csv(dfg.slim, filePath.slim, row.names=FALSE)
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") date.today <- format(Sys.Date(), "%y%m%d") refPoints <- geojson_read(     paste("Input/CookEast_GeoreferencePoints_",         date.today,         ".json", sep = ""),     what = "sp") # Get dataframe df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "SL" df[df$Strip == 3 & df$Field == "A",]$Crop = "GB" df[df$Strip == 2 & df$Field == "A",]$Crop = "GB" df[df$Strip == 1 & df$Field == "A",]$Crop = "GB" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "GB" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints,           paste(             "Output/HY2014_AssumedCropPerGeoRefPoint_",             date.today,             ".csv",             sep = "") )
# ---- Setup ----
library(rgdal)
library(geojsonio)
library(jsonlite)
library(spatialEco)
#y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv")
date.today <- format(Sys.Date(), "%y%m%d")
refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",     what = "sp")
# Get dataframe
df <- refPoints@data
# Set crops - this is based on Y2014 in Input/CAF_strips.shp
df$Crop <- NA
df[df$Strip == 6 & df$Field == "A",]$Crop = "SW"
df[df$Strip == 5 & df$Field == "A",]$Crop = "SW"
df[df$Strip == 4 & df$Field == "A",]$Crop = "SL"
df[df$Strip == 3 & df$Field == "A",]$Crop = "GB"
df[df$Strip == 2 & df$Field == "A",]$Crop = "GB"
df[df$Strip == 1 & df$Field == "A",]$Crop = "GB"
df[df$Strip == 6 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 5 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 4 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 3 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 2 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 1 & df$Field == "B",]$Crop = "WW"
df[df$Strip == 1 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 2 & df$Field == "C",]$Crop = "GB"
df[df$Strip == 3 & df$Field == "C",]$Crop = "SB"
df[df$Strip == 4 & df$Field == "C",]$Crop = "WW"
df[df$Strip == 5 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 6 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 7 & df$Field == "C",]$Crop = "SW"
df[df$Strip == 8 & df$Field == "C",]$Crop = "SW"
refPoints@data = df
write.csv(refPoints,           paste(             "Output/HY2014_AssumedCropPerGeoRefPoint_",             date.today,             ".csv",             sep = "") )
# Author: Bryan Carlson # Contact: bryan.carlson@ars.usda.gov # Purpose: Determine crop for each location based on field-strip map # ---- Setup ---- library(rgdal) library(geojsonio) library(jsonlite) library(spatialEco) #y <- read.csv("Input/HY2014GB_aggregate_all_data_171122.csv") date.today <- format(Sys.Date(), "%y%m%d") refPoints <- geojson_read("Input/CookEast_GeoreferencePoints_171127.json",     what = "sp") # Get dataframe df <- refPoints@data # Set crops - this is based on Y2014 in Input/CAF_strips.shp df$Crop <- NA df[df$Strip == 6 & df$Field == "A",]$Crop = "SW" df[df$Strip == 5 & df$Field == "A",]$Crop = "SW" df[df$Strip == 4 & df$Field == "A",]$Crop = "GB" df[df$Strip == 3 & df$Field == "A",]$Crop = "GB" df[df$Strip == 2 & df$Field == "A",]$Crop = "GB" df[df$Strip == 1 & df$Field == "A",]$Crop = "GB" df[df$Strip == 6 & df$Field == "B",]$Crop = "WW" df[df$Strip == 5 & df$Field == "B",]$Crop = "WW" df[df$Strip == 4 & df$Field == "B",]$Crop = "WW" df[df$Strip == 3 & df$Field == "B",]$Crop = "WW" df[df$Strip == 2 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "B",]$Crop = "WW" df[df$Strip == 1 & df$Field == "C",]$Crop = "SW" df[df$Strip == 2 & df$Field == "C",]$Crop = "GB" df[df$Strip == 3 & df$Field == "C",]$Crop = "SB" df[df$Strip == 4 & df$Field == "C",]$Crop = "WW" df[df$Strip == 5 & df$Field == "C",]$Crop = "SW" df[df$Strip == 6 & df$Field == "C",]$Crop = "SW" df[df$Strip == 7 & df$Field == "C",]$Crop = "SW" df[df$Strip == 8 & df$Field == "C",]$Crop = "SW" refPoints@data = df write.csv(refPoints,           paste(             "Output/HY2014_AssumedCropPerGeoRefPoint_",             date.today,             ".csv",             sep = "") )
